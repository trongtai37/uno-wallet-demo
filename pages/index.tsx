/* eslint-disable no-unused-vars */
import { useAuthentication } from '@/queries/index';
import { axiosInstance } from '@/services/axiosInstance';
import {
  Box,
  Button,
  Grid,
  MenuItem,
  Select,
  Switch,
  TextareaAutosize,
  TextField,
  Typography,
} from '@mui/material';
import { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';
import type { NextPage } from 'next';
import Head from 'next/head';
import * as React from 'react';
import { SafeAny } from '../models';

export enum FiatCode {
  USD = 'USD',
  JPY = 'JPY',
  EUR = 'EUR',
  MXN = 'MXN',
}

export enum FundingSource {
  PAYPAL = 'paypal',
  CARD = 'card',
}

const Home: NextPage = () => {
  const { user, logIn, logOut, isLoggingIn } = useAuthentication();
  const [email, setEmail] = React.useState<string>('');
  const [password, setPassword] = React.useState<string>('');
  const [amount, setAmount] = React.useState<number>(0);
  const [paymentId, setPaymentId] = React.useState<string>('');
  const [currency, setCurrency] = React.useState<FiatCode>(FiatCode.USD);
  const [fundingSource, setFundingSource] = React.useState<FundingSource>(
    FundingSource.PAYPAL,
  );
  const [shouldRender, setShouldRender] = React.useState<boolean>(false);

  return (
    <>
      <Head>
        <title>Home page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container p={2}>
        <Grid item xs={4}>
          <TextField
            label="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <Box my={2} />
          <TextField
            label="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </Grid>
        <Grid item xs={8}>
          <TextareaAutosize
            disabled
            value={JSON.stringify(user, null, 2)}
            minRows={12}
            style={{
              width: 600,
              maxHeight: 600,
            }}
          />
        </Grid>
        <Box p={2}></Box>
      </Grid>
      <Box p={2}>
        <Button
          variant="contained"
          onClick={() =>
            logIn({
              email,
              password,
              recaptchaResponse: 'w',
            })
          }
          disableFocusRipple
        >
          Login
        </Button>
        <Button variant="outlined" onClick={logOut as SafeAny}>
          Logout
        </Button>
        <Typography variant="heading1">
          {isLoggingIn ? 'Logging in ...' : null}
        </Typography>
      </Box>
      <Typography variant="h2" p={2}>
        Deposit
      </Typography>
      <Box p={2}>
        <TextField
          label="Amount"
          value={amount}
          onChange={(e) => setAmount(Number(e.target.value))}
        />
        <Select
          label="Currency"
          sx={{ minWidth: 100 }}
          value={currency}
          onChange={(e) => setCurrency(e.target.value as FiatCode)}
        >
          {Object.values(FiatCode).map((code) => (
            <MenuItem key={code} value={code}>
              {code}
            </MenuItem>
          ))}
        </Select>
        <Select
          label="Funding Source"
          sx={{ minWidth: 100 }}
          value={fundingSource}
          onChange={(e) => setFundingSource(e.target.value as FundingSource)}
        >
          {Object.values(FundingSource).map((source) => (
            <MenuItem key={source} value={source}>
              {source}
            </MenuItem>
          ))}
        </Select>
        <Switch
          checked={shouldRender}
          onChange={() => setShouldRender((x) => !x)}
        />
      </Box>

      {shouldRender && (
        <Box p={2}>
          <PayPalScriptProvider
            options={{
              'client-id': process.env.NEXT_PUBLIC_PAYPAL_CLIENT_ID!,
              currency,
            }}
          >
            <PayPalButtons
              fundingSource={fundingSource}
              // forceReRender={[paymentId, amount, currency, fundingSource]}
              onCancel={() =>
                axiosInstance.put('/deposit/fiat/cancel-payment', {
                  paymentId,
                })
              }
              onError={() =>
                axiosInstance.put('/deposit/fiat/cancel-payment', {
                  paymentId,
                })
              }
              createOrder={async (_, actions) => {
                const response = await axiosInstance.post(
                  '/deposit/fiat/create-payment',
                  {
                    amount,
                    currency,
                    fundingSource,
                  },
                );
                setPaymentId(response.data.paymentId);
                return String(response.data.captureId);
              }}
              onApprove={(_, actions) => {
                return (actions as any).order.capture().then((details) => {
                  const name = details.payer.name.given_name;
                  alert(`Transaction completed by ${name}`);
                });
              }}
            />
          </PayPalScriptProvider>
        </Box>
      )}
    </>
  );
};

export default Home;
